{"version":3,"file":"Table.js","sources":["../src/Table/Table.tsx"],"sourcesContent":["import { ClassNames } from \"@emotion/core\";\nimport React from \"react\";\nimport * as typography from \"../typography\";\nimport { colors } from \"../colors\";\nimport { assertUnreachable } from \"../shared/assertUnreachable\";\n\ntype As = React.ReactElement | keyof JSX.IntrinsicElements;\n\n/**\n * Take an `as` value and make it into a `React.ReactElement`\n */\nfunction createElementFromAs(as: As): React.ReactElement {\n  return React.isValidElement(as)\n    ? as\n    : typeof as === \"string\"\n    ? React.createElement(as)\n    : assertUnreachable(as);\n}\n\ninterface Props<RowShape> {\n  /**\n   * Override the the default element used to render the `table` element\n   *\n   * All props provided will be merged with props that this component adds,\n   * including `className`s being merged using emotion's `cx` function\n   *\n   * @default \"<table />\"\n   */\n  as?: React.ReactElement;\n\n  /**\n   * Component data\n   *\n   * The shape of the data will be inferred from here\n   */\n  data: ReadonlyArray<RowShape>;\n\n  /**\n   * How dense the table should be\n   *\n   * @default \"standard\"\n   */\n  density?: \"standard\" | \"condensed\" | \"relaxed\";\n\n  /**\n   * Definition of how each column will be rendered\n   */\n  columns: readonly {\n    /**\n     * Override the the default element\n     *\n     * All props provided will be merged with props that this component adds,\n     * including `className`s being merged using emotion's `cx` function\n     *\n     * @default \"td\"\n     */\n    as?: As;\n\n    /**\n     * Column's title\n     */\n    headerTitle?: React.ReactNode | string;\n\n    /**\n     * Unique identifier for the column\n     *\n     * Initially, we'll just be using this for the `key` attribute on cells and\n     * `col`s\n     */\n    id: string | number;\n    /**\n     * Properties to be applied to `col` elements nested below the `table`'s\n     * single `<colgroup>`.\n     *\n     * This allows you to apply styles to columns by setting a class on a single\n     * element instead of _all_ elements in a table's row.\n     *\n     * Note that, per the [column\n     * spec](https://www.w3.org/TR/CSS2/tables.html#columns), there is a very\n     * limited set of style properties that can be applied to a column (via\n     * `style` or `className`):\n     * * `background`\n     * * `border`\n     * * `visiblity`\n     * * `width`\n     */\n    colProps?: React.DetailedHTMLProps<\n      React.ColHTMLAttributes<HTMLTableColElement>,\n      HTMLTableColElement\n    >;\n\n    /**\n     * Render function that renders the content for the column to be placed\n     * inside the `<td>`\n     *\n     * Since this is a render function, `React.createElement` will _not_ be\n     * called, nor will propTypes be checked. This is to prevent mounting and\n     * unmounting on each render\n     *\n     * Note: the signature of the method is the same as a `map` function\n     */\n    render: (\n      input: Readonly<RowShape>,\n      index: number,\n      list: readonly RowShape[],\n    ) => React.ReactNode;\n\n    /**\n     * Override the the default `th` element\n     *\n     * All props provided will be merged with props that this component adds,\n     * including `className`s being merged using emotion's `cx` function\n     *\n     * @default \"th\"\n     */\n    thAs?: As;\n  }[];\n\n  /**\n   * String or method to calculate the `key` for each row\n   *\n   * When re-ordering rows (by sorting or any other means), this will ensure\n   * that DOM elements are reused correctly.\n   *\n   * Can be a string representing a field in `RowData` (inferred from `data` or\n   * included as a generic to `<Table<RowData>>`) or a function that takes the\n   * row data and returns a key\n   */\n  keyOn: keyof RowShape | ((row: RowShape) => any);\n\n  /**\n   * Override the the default element used to render `tr` elements\n   *\n   * You can pass a single value that will be applied to both the `thead > tr`\n   * and `tbody> tr` or you can individiaully specify `head` and `body` values,\n   * both of which are optional.\n   *\n   * All props provided will be merged with props that this component adds,\n   * including `className`s being merged using emotion's `cx` function\n   *\n   * @default \"tr\"\n   */\n  trAs?:\n    | As\n    | {\n        head?: As;\n        body?: As;\n      };\n}\n\n/**\n * Tables provide a structure to data and a visual grid making it easier to see\n * relationships and are one of the most useful tools and formats for organizing\n * and communiting structured data.\n *\n * @see https://zpl.io/bAlrjJe\n */\nexport function Table<RowShape>({\n  as = <table />,\n  data,\n  density = \"standard\",\n  columns,\n  keyOn,\n  trAs = \"tr\",\n}: Props<RowShape>): ReturnType<React.FC> {\n  const padding = density === \"standard\" ? 8 : density === \"condensed\" ? 3 : 11;\n  const getRowKey =\n    typeof keyOn === \"function\" ? keyOn : (row: RowShape) => row[keyOn];\n\n  const headTrElement = React.isValidElement(trAs)\n    ? trAs\n    : typeof trAs === \"string\"\n    ? React.createElement(trAs)\n    : createElementFromAs(trAs.head || \"tr\");\n\n  const bodyTrElement = React.isValidElement(trAs)\n    ? trAs\n    : typeof trAs === \"string\"\n    ? React.createElement(trAs)\n    : createElementFromAs(trAs.body || \"tr\");\n\n  return (\n    <ClassNames>\n      {({ css, cx }) =>\n        React.cloneElement(\n          as,\n          {\n            className: cx(\n              css({\n                borderCollapse: \"collapse\",\n                width: \"100%\",\n              }),\n              as.props.className,\n            ),\n          },\n          <>\n            <colgroup>\n              {columns.map(({ colProps, id }) => (\n                <col key={id} {...colProps} />\n              ))}\n            </colgroup>\n\n            <thead>\n              {React.cloneElement(\n                headTrElement,\n                {\n                  className: cx(\n                    css({\n                      ...typography.base.xsmall,\n                      borderBottom: `1px solid ${colors.silver.dark}`,\n                      color: colors.grey.darker,\n                      textAlign: \"left\",\n                      textTransform: \"uppercase\",\n                    }),\n                    headTrElement.props.className,\n                  ),\n                },\n                <>\n                  {columns.map(({ headerTitle, id, thAs = \"th\" }, colIndex) => {\n                    const element = createElementFromAs(thAs);\n\n                    return React.cloneElement(\n                      element,\n                      {\n                        className: css(\n                          css({\n                            fontWeight: 600,\n                            padding,\n                            paddingLeft: colIndex === 0 ? 0 : padding,\n                            paddingRight:\n                              colIndex === columns.length - 1 ? 0 : padding,\n                          }),\n                          element.props.className,\n                        ),\n                        key: id,\n                      },\n                      headerTitle,\n                    );\n                  })}\n                </>,\n              )}\n            </thead>\n            <tbody>\n              {data.map((item, index) =>\n                React.cloneElement(\n                  bodyTrElement,\n                  {\n                    key: getRowKey(item),\n                  },\n                  <>\n                    {columns.map(({ as = \"td\", render, id }, colIndex) => {\n                      const element = createElementFromAs(as);\n\n                      return React.cloneElement(\n                        element,\n                        {\n                          key: id,\n                          className: cx(\n                            css({\n                              // no border on the bottom row\n                              borderBottom:\n                                index === data.length - 1\n                                  ? `none`\n                                  : `1px solid ${colors.silver.dark}`,\n                              padding,\n                              paddingLeft: colIndex === 0 ? 0 : padding,\n                              paddingRight:\n                                colIndex === columns.length - 1 ? 0 : padding,\n                            }),\n                            element.props.className,\n                          ),\n                        },\n                        render(item, index, data),\n                      );\n                    })}\n                  </>,\n                ),\n              )}\n            </tbody>\n          </>,\n        )\n      }\n    </ClassNames>\n  );\n}\n"],"names":["createElementFromAs","as","React","isValidElement","createElement","assertUnreachable","Table","_a","_b","data","_c","density","columns","keyOn","_d","trAs","padding","getRowKey","row","headTrElement","head","bodyTrElement","body","ClassNames","css","cx","cloneElement","className","borderCollapse","width","props","map","colProps","id","key","typography","borderBottom","colors","silver","dark","color","grey","darker","textAlign","textTransform","colIndex","headerTitle","thAs","element","fontWeight","paddingLeft","paddingRight","length","item","index","render"],"mappings":"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"}