{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar _tslib = require('../_tslib-bcbe0269.js');\n\nvar core = require('@emotion/core');\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nrequire('../fonts/fonts.js');\n\nvar base$1 = require('../base-91f9e1df.js');\n\nrequire('../mono-a0d4bd30.js');\n\nvar colors = require('../colors/colors.js');\n\nvar assertUnreachable = require('../assertUnreachable-698a501a.js');\n\nvar index = require('../SpaceKitProvider/index.js');\n\nrequire('../colors/utils/findPaletteByColor.js');\n\nvar getOffsetInPalette = require('../colors/utils/getOffsetInPalette.js');\n\nvar tinycolor = _interopDefault(require('tinycolor2'));\n\nvar LoadingSpinner = require('../Loaders/LoadingSpinner.js');\n\nvar focus = require('@react-aria/focus');\n\nvar utils = require('@react-aria/utils');\n\nvar omit = _interopDefault(require('lodash/omit'));\n\nvar ButtonIcon = require('./button/ButtonIcon.js');\n\nvar inputHeightDictionary = require('../inputHeightDictionary-78849349.js');\n\nvar TooltipContext = require('../TooltipContext-20cc2d3d.js');\n/**\r\n * Save a default color so we can check if we used the default or not. The\r\n * default color has a few special properties.\r\n */\n\n\nvar defaultColor = colors.colors.silver.light;\n/**\r\n * Get the button's text color\r\n */\n\nfunction getTextColor(_a) {\n  var color = _a.color,\n      feel = _a.feel,\n      theme = _a.theme,\n      mode = _a.mode; // Text color will always be the same for secondary buttons\n\n  if (color === colors.colors.white) {\n    return colors.colors.grey.darker;\n  }\n\n  switch (feel) {\n    case \"raised\":\n      // Set the base (meaning no pseudo-selectors) text color for raised\n      // buttons. Otherwise return `undefined` to not change the color.\n      //\n      // We have some special logic for the raised color; set the text color to\n      // be what is most readable between white and the default text color and\n      // the _hover_ color's background. This is overrideable by the user, but\n      // it shouldn't need to be.\n      return !mode ? tinycolor.mostReadable(getHoverBackgroundColor({\n        color: color,\n        feel: feel,\n        theme: theme\n      }), [colors.colors.white, colors.colors.grey.darker], {\n        level: \"AA\",\n        size: \"small\"\n      }).toString() : undefined;\n\n    case \"flat\":\n      if (color === defaultColor) {\n        return theme === \"dark\" ? colors.colors.grey.light : colors.colors.grey.darker;\n      } // We have a custom color and we're in dark mode, lighten the base and\n      // focused colors 1 shade.\n\n\n      if (theme === \"dark\" && (!mode || mode === \":focus\")) {\n        return getOffsetInPalette.getOffsetInPalette(1, \"lighter\", color);\n      }\n\n      return color;\n\n    /* istanbul ignore next */\n\n    default:\n      throw assertUnreachable.assertUnreachable(feel);\n  }\n}\n/**\r\n * Get the button's height\r\n */\n\n\nfunction getHeight(_a) {\n  var size = _a.size;\n\n  switch (size) {\n    case \"small\":\n      return 28;\n\n    case \"default\":\n    case \"standard\":\n      return 36;\n\n    case \"large\":\n      return 42;\n\n    /* istanbul ignore next */\n\n    default:\n      throw assertUnreachable.assertUnreachable(size);\n  }\n}\n/**\r\n * Get the hover background color\r\n */\n\n\nfunction getHoverBackgroundColor(_a) {\n  var color = _a.color,\n      feel = _a.feel,\n      theme = _a.theme;\n\n  if (color === colors.colors.white) {\n    // Special case for secondary buttons\n    return colors.colors.silver.light;\n  }\n\n  switch (feel) {\n    case \"flat\":\n      // Hardcode if we're using the default color (special case), otherwise get\n      // the next lightest color.\n      if (color === defaultColor) {\n        return theme === \"light\" ? colors.colors.silver.light : colors.colors.grey.dark;\n      }\n\n      return getOffsetInPalette.getOffsetInPalette(Infinity, \"lighter\", color);\n\n    case \"raised\":\n      // One shade darker\n      return getOffsetInPalette.getOffsetInPalette(1, \"darker\", color);\n\n    /* istanbul ignore next */\n\n    default:\n      throw assertUnreachable.assertUnreachable(feel);\n  }\n}\n/**\r\n * Style system for Space Kit buttons\r\n *\r\n * This is intended to be used as an abstraction for your project's style guide.\r\n *\r\n * @see https://zpl.io/amdN6Pr\r\n */\n\n\nvar Button = /*#__PURE__*/React__default.forwardRef(function (_a, ref) {\n  var _b = _a.as,\n      as = _b === void 0 ? core.jsx(\"button\", null) : _b,\n      children = _a.children,\n      _c = _a.color,\n      color = _c === void 0 ? defaultColor : _c,\n      variant = _a.variant,\n      endIcon = _a.endIcon,\n      _d = _a.feel,\n      feel = _d === void 0 ? \"raised\" : _d,\n      iconProp = _a.icon,\n      loading = _a.loading,\n      _e = _a.size,\n      size = _e === void 0 ? \"standard\" : _e,\n      propTheme = _a.theme,\n      passthroughProps = _tslib.__rest(_a, [\"as\", \"children\", \"color\", \"variant\", \"endIcon\", \"feel\", \"icon\", \"loading\", \"size\", \"theme\"]);\n\n  if (size === \"default\") {\n    size = \"standard\";\n  }\n\n  var _f = focus.useFocusRing(),\n      isFocusVisible = _f.isFocusVisible,\n      focusProps = _f.focusProps;\n\n  var providerTheme = index.useSpaceKitProvider().theme;\n  var theme = propTheme || providerTheme; // Capture if the mouse is over the button by using `onPointerEnter` and\n  // `onPointerLeave`, which will still fire if the button is disabled. When\n  // we know the cursor is over the button, then override the button's\n  // `disabled` behavior to allow `Tooltip`s to work.\n\n  var _g = React.useState(false),\n      isPointerOver = _g[0],\n      setIsPointerOver = _g[1];\n\n  var mergedProps = utils.mergeProps(passthroughProps, as.props, focusProps, {\n    ref: ref\n  });\n  /**\r\n   * If the button is in a `loading` state, then always treat the button as\r\n   * disabled.\r\n   */\n\n  if (loading) {\n    mergedProps.disabled = true;\n  }\n  /**\r\n   * Flag indicating we're going to override the default disabled behavior to\r\n   * make an antecedent `Tooltip` work\r\n   */\n\n\n  var overrideDisabledBehavior = TooltipContext.useTooltipContext().descendsFromTooltip && isPointerOver && mergedProps.disabled;\n  /**\r\n   * Handler to avoid responding to click events for all attached listeners\r\n   * when `disabled`\r\n   */\n\n  var onClick = function (event) {\n    var _a; // If the button is disabled, then don't propogate `onClick`\n    // events.\n\n\n    if (mergedProps.disabled) return event.preventDefault();\n    (_a = mergedProps.onClick) === null || _a === void 0 ? void 0 : _a.call(mergedProps, event);\n  };\n  /**\r\n   * Styles to apply when button is disabled.\r\n   *\r\n   * We store this because we use this in multiple places to account for\r\n   * overriding the default disabled behavior.\r\n   */\n\n\n  var disabledStyles = {\n    backgroundColor: feel === \"flat\" ? \"transparent\" : theme === \"light\" ? colors.colors.silver.light : colors.colors.grey.dark,\n    boxShadow: \"none\",\n    color: feel === \"flat\" && theme === \"dark\" ? colors.colors.grey.dark : colors.colors.grey.light\n  };\n\n  var focusedStyles = _tslib.__assign(_tslib.__assign({}, feel === \"flat\" && {\n    backgroundColor: theme === \"light\" ? colors.colors.white : \"#000\",\n    color: theme === \"light\" ? colors.colors.blue.base : colors.colors.blue.light\n  }), {\n    // The `box-shadow` property is copied directly from Zeplin for the\n    // light theme. For the dark theme we use a variant of the color to\n    // make the borders sharp.\n    boxShadow: \"0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 0 0 2px \" + (theme === \"light\" || color === defaultColor || color === colors.colors.white ? \"#bbdbff\" : getOffsetInPalette.getOffsetInPalette(Infinity, \"lighter\", color)) + \", inset 0 0 0 1px \" + (color === defaultColor || color === colors.colors.white ? \"#2075d6\" : getOffsetInPalette.getOffsetInPalette(1, \"darker\", color)) + \", inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)\"\n  });\n\n  var icon = loading ? core.jsx(LoadingSpinner.LoadingSpinner, {\n    size: \"2xsmall\",\n    theme: theme === \"light\" ? \"grayscale\" : \"dark\"\n  }) : iconProp;\n  /**\r\n   * Icon size in pixels\r\n   *\r\n   * This is stored so we can use the same value for `height` and `width`\r\n   */\n\n  var iconSize = size === \"small\" ? 12 : size === \"large\" ? 24 : 16;\n  var iconOnly = !children;\n\n  if (variant === \"fab\") {\n    if (!icon) {\n      throw new TypeError(\"FAB buttons are required to have an `icon`\");\n    } else if (children) {\n      throw new TypeError(\"FAB buttons cannot have children, only an `icon`\");\n    }\n  }\n\n  return core.jsx(core.ClassNames, null, function (_a) {\n    var cx = _a.cx,\n        css = _a.css;\n    var propsToPass = utils.mergeProps( // Omit `onClick` from `otherProps` beacuse we'll be conditionally\n    // calling it in the `onClick` handler depending on `mergedProps.disabled`.\n    // Also exclude `className` beacuse we'll be combining it on\n    // our own with `cx`. This is necessary because `cx` allows for\n    // emotion styles to be logically overwritten.\n    omit(mergedProps, \"className\", \"onClick\", // If we're overriding the default disabled behavior, then strip\n    // it out from the props we'll pass to the element.\n    overrideDisabledBehavior ? \"disabled\" : \"\"), {\n      \"aria-disabled\": mergedProps.disabled,\n      onClick: onClick,\n      onPointerEnter: function () {\n        setIsPointerOver(true);\n      },\n      onPointerLeave: function () {\n        setIsPointerOver(false);\n      },\n      className: cx(css([{\n        \"&:focus\": {\n          outline: 0\n        }\n      }, _tslib.__assign(_tslib.__assign(_tslib.__assign(_tslib.__assign({\n        backgroundColor: color === colors.colors.white ? colors.colors.white : feel === \"raised\" ? color : \"transparent\",\n        borderRadius: variant === \"fab\" ? \"100%\" : 4,\n        borderWidth: 0\n      }, feel !== \"flat\" && {\n        boxShadow: theme === \"light\" ? \"0 1px 4px 0 rgba(18, 21, 26, 0.04), inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)\" : \"0 0 0 1px rgba(18, 21, 26, 0.2), 0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 1px 0 0 rgba(18, 21, 26, 0.05)\"\n      }), {\n        color: getTextColor({\n          color: color,\n          feel: feel,\n          theme: theme\n        }),\n        cursor: mergedProps.disabled ? \"default\" : \"pointer\",\n        // Vertically center children\n        display: \"inline-flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        height: getHeight({\n          size: size\n        }),\n        minWidth: iconOnly ? inputHeightDictionary.inputHeightDictionary[size === \"default\" ? \"standard\" : size] : endIcon ? 0 : size === \"small\" ? 76 : size === \"default\" || size === \"standard\" ? 100 : size === \"large\" ? 112 : assertUnreachable.assertUnreachable(size),\n        // We have to set the Y padding because browsers (at least Chrome) has\n        // a non-symmetrical vertical padding applied by default.\n        paddingLeft: iconOnly ? 0 : 12,\n        paddingRight: iconOnly ? 0 : endIcon ? 8 : 12\n      }), size === \"small\" ? base$1.small : size === \"large\" ? base$1.large : base$1.base), {\n        fontWeight: 600,\n        // Disable the outline because we're setting a custom `:active` style\n        outline: 0,\n        textDecoration: \"none\",\n        whiteSpace: \"nowrap\"\n      }), // We need to also set the `:hover` on `:disabled` so it has a\n      // higher specificity than any `:hover` classes passed in. This\n      // also means that both of these need to be overriden if we want\n      // to use a custom disabled color.\n      mergedProps.disabled ? overrideDisabledBehavior ? disabledStyles : {\n        \"&[disabled], &[disabled]:hover\": disabledStyles\n      } : {\n        \":hover, &[data-force-hover-state]\": _tslib.__assign({\n          backgroundColor: getHoverBackgroundColor({\n            color: color,\n            feel: feel,\n            theme: theme\n          }),\n          color: getTextColor({\n            color: color,\n            feel: feel,\n            theme: theme,\n            mode: \":hover\"\n          })\n        }, feel !== \"flat\" && {\n          // The `box-shadow` property is copied directly from Zeplin\n          boxShadow: theme === \"light\" ? \"0 5px 10px 0 rgba(18, 21, 26, 0.08), inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)\" : \"0 0 0 1px rgba(18, 21, 26, 0.2), 0 5px 10px 0 rgba(18, 21, 26, 0.12), 0 1px 0 0 rgba(18, 21, 26, 0.05)\"\n        }),\n        // This is kind of hacky behavior\n        \"&[data-force-focus-state]\": focusedStyles,\n        \"&:active, &[data-force-active-state], &[aria-expanded=true]\": _tslib.__assign(_tslib.__assign({}, getTextColor({\n          color: color,\n          feel: feel,\n          theme: theme,\n          mode: \":hover\"\n        }) && {\n          color: getTextColor({\n            color: color,\n            feel: feel,\n            theme: theme,\n            mode: \":active\"\n          })\n        }), {\n          backgroundColor: color === colors.colors.white ? colors.colors.white : feel === \"raised\" ? color : color === defaultColor ? theme === \"dark\" ? colors.colors.grey.darker : colors.colors.silver.base : getOffsetInPalette.getOffsetInPalette(2, \"lighter\", color),\n          // The `box-shadow` properties are copied directly from Zeplin\n          boxShadow: feel !== \"flat\" ? theme === \"light\" ? \"inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05), inset 0 2px 2px 0 rgba(18, 21, 26, 0.12)\" : \"0 0 0 1px rgba(18, 21, 26, 0.2), 0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 -1px 0 0 rgba(18, 21, 26, 0.16), inset 0 1px 2px 0 rgba(18, 21, 26, 0.42)\" : \"none\",\n          outline: \"0\"\n        })\n      }]), mergedProps.className, isFocusVisible && css(focusedStyles)),\n      children: core.jsx(React__default.Fragment, null, icon && core.jsx(ButtonIcon.ButtonIcon, {\n        iconSize: iconSize,\n        className: css({\n          margin: iconOnly ? 0 : \"0 8px 0 0\"\n        })\n      }, icon), children, endIcon && !loading && core.jsx(ButtonIcon.ButtonIcon, {\n        iconSize: iconSize,\n        className: css({\n          margin: iconOnly ? 0 : \"0 0 0 6px\"\n        })\n      }, endIcon))\n    });\n    return /*#__PURE__*/React__default.cloneElement(as, propsToPass);\n  });\n});\nexports.Button = Button;","map":{"version":3,"sources":["../src/Button/Button.tsx"],"names":["defaultColor","colors","color","feel","theme","mode","getHoverBackgroundColor","level","size","getOffsetInPalette","assertUnreachable","Button","_b","jsx","children","_c","variant","endIcon","_d","iconProp","loading","_e","propTheme","passthroughProps","_f","isFocusVisible","focusProps","useFocusRing","providerTheme","useSpaceKitProvider","_g","isPointerOver","setIsPointerOver","useState","mergedProps","mergeProps","as","ref","overrideDisabledBehavior","useTooltipContext","onClick","event","disabledStyles","backgroundColor","boxShadow","light","focusedStyles","icon","LoadingSpinner","iconSize","iconOnly","ClassNames","cx","css","propsToPass","omit","onPointerEnter","onPointerLeave","className","outline","borderRadius","borderWidth","getTextColor","cursor","display","alignItems","justifyContent","height","getHeight","minWidth","inputHeightDictionary","paddingLeft","paddingRight","base","fontWeight","textDecoration","whiteSpace","ButtonIcon","margin","React"],"mappings":"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","sourcesContent":["/** @jsx jsx */\n/** @jsxFrag React.Fragment */\nimport { colors, ShadedColor } from \"../colors\";\nimport type { Property, SimplePseudos } from \"csstype\";\nimport { base } from \"../typography\";\nimport { ClassNames, jsx, ObjectInterpolation } from \"@emotion/core\";\nimport { getOffsetInPalette } from \"../colors/utils/getOffsetInPalette\";\nimport tinycolor from \"tinycolor2\";\nimport React, { useState } from \"react\";\nimport { LoadingSpinner } from \"../Loaders\";\nimport { assertUnreachable } from \"../shared/assertUnreachable\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport omit from \"lodash/omit\";\nimport { ButtonIcon } from \"./button/ButtonIcon\";\nimport { inputHeightDictionary } from \"../shared/inputHeightDictionary\";\nimport { useTooltipContext } from \"../shared/TooltipContext\";\nimport { useSpaceKitProvider } from \"../SpaceKitProvider\";\ntype TLength = string | 0 | number;\n\n/**\n * Save a default color so we can check if we used the default or not. The\n * default color has a few special properties.\n */\nconst defaultColor = colors.silver.light;\n\n/**\n * Get the button's text color\n */\nfunction getTextColor({\n  color,\n  feel,\n  theme,\n  mode,\n}: {\n  color: NonNullable<Props[\"color\"]>;\n  feel: NonNullable<Props[\"feel\"]>;\n  theme: NonNullable<Props[\"theme\"]>;\n  mode?: SimplePseudos;\n}): Property.Color | undefined {\n  // Text color will always be the same for secondary buttons\n  if (color === colors.white) {\n    return colors.grey.darker;\n  }\n\n  switch (feel) {\n    case \"raised\":\n      // Set the base (meaning no pseudo-selectors) text color for raised\n      // buttons. Otherwise return `undefined` to not change the color.\n      //\n      // We have some special logic for the raised color; set the text color to\n      // be what is most readable between white and the default text color and\n      // the _hover_ color's background. This is overrideable by the user, but\n      // it shouldn't need to be.\n      return !mode\n        ? tinycolor\n            .mostReadable(\n              getHoverBackgroundColor({ color, feel, theme }),\n              [colors.white, colors.grey.darker],\n              {\n                level: \"AA\",\n                size: \"small\",\n              },\n            )\n            .toString()\n        : undefined;\n    case \"flat\":\n      if (color === defaultColor) {\n        return theme === \"dark\" ? colors.grey.light : colors.grey.darker;\n      }\n\n      // We have a custom color and we're in dark mode, lighten the base and\n      // focused colors 1 shade.\n      if (theme === \"dark\" && (!mode || mode === \":focus\")) {\n        return getOffsetInPalette(1, \"lighter\", color);\n      }\n\n      return color;\n    /* istanbul ignore next */\n    default:\n      throw assertUnreachable(feel);\n  }\n}\n\n/**\n * Get the button's height\n */\nfunction getHeight({\n  size,\n}: {\n  size: NonNullable<Props[\"size\"]>;\n}): Property.Height<TLength> {\n  switch (size) {\n    case \"small\":\n      return 28;\n    case \"default\":\n    case \"standard\":\n      return 36;\n    case \"large\":\n      return 42;\n    /* istanbul ignore next */\n    default:\n      throw assertUnreachable(size);\n  }\n}\n\n/**\n * Get the hover background color\n */\nfunction getHoverBackgroundColor({\n  color,\n  feel,\n  theme,\n}: {\n  color: NonNullable<Props[\"color\"]>;\n  feel: NonNullable<Props[\"feel\"]>;\n  theme: NonNullable<Props[\"theme\"]>;\n}): Property.BackgroundColor {\n  if (color === colors.white) {\n    // Special case for secondary buttons\n    return colors.silver.light;\n  }\n\n  switch (feel) {\n    case \"flat\":\n      // Hardcode if we're using the default color (special case), otherwise get\n      // the next lightest color.\n      if (color === defaultColor) {\n        return theme === \"light\" ? colors.silver.light : colors.grey.dark;\n      }\n\n      return getOffsetInPalette(Infinity, \"lighter\", color);\n    case \"raised\":\n      // One shade darker\n      return getOffsetInPalette(1, \"darker\", color);\n    /* istanbul ignore next */\n    default:\n      throw assertUnreachable(feel);\n  }\n}\n\n// Types that could use some improvement:\n// * Don't allow `children` and `icon` to be missing\n// * Don't allow `children` when `FAB`\n//\n// I was able to get guarantees to work, but only with very cryptic errors. I\n// decided it'd be best, for the time being, to `throw` if we use things\n// incorrectly.\ninterface Props\n  extends Omit<\n    React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>,\n    \"css\"\n  > {\n  /**\n   * Override the the default element used to render a button\n   *\n   * All props provided will be merged with props that `Button` adds, including\n   * `className`s being merged.\n   *\n   * @default <button />\n   */\n  as?: React.ReactElement;\n\n  /**\n   * Base color to calculate all other colors with\n   *\n   * This has a special meaning for buttons with a \"flat\" feel; this will change\n   * the text color as well as the background colors.\n   *\n   * Pass `colors.white` to treat this button as a secondary button\n   *\n   * @default colors.silver.light\n   */\n  color?: ShadedColor | typeof colors[\"white\"];\n\n  /**\n   * If the button will appear and behave disabled.\n   *\n   * This will be directly applied to the underlying `button` with a notable\n   * exception: if this `Button` is rendered inside of a `Tooltip`, is disabled,\n   * and the pointer is over the button, the `disabled` prop will be removed\n   * from the `button` element and the disabled styles will be directly applied.\n   * This will allow disabled buttons to still use `Tooltip`.\n   *\n   * @default false\n   */\n  disabled?: boolean;\n\n  /**\n   * Icon to use at the end of a button\n   *\n   * The size of icons will be automatically determined, but can be overriden\n   */\n  endIcon?: React.ReactElement;\n\n  /**\n   * Which feel to display\n   *\n   * The options are as follows:\n   *\n   * - `\"raised\"` (default): A button with a border and a background\n   * - `\"flat\"`: No background or border\n   *\n   * @default \"raised\"\n   */\n  feel?: \"raised\" | \"flat\";\n\n  /**\n   * Either an icon to show to the left of the button text, or on it's own\n   */\n  icon?: React.ReactElement;\n\n  /**\n   * Show a loading spinner in place of the original icon on this button\n   *\n   * Automatically disables the button as well\n   */\n  loading?: boolean;\n\n  /**\n   * Size of the button\n   *\n   * The `default` option has been deprecated but will probably never be removed\n   * for reverse compatability.\n   *\n   * @default \"standard\"\n   */\n  size?: keyof typeof inputHeightDictionary | \"default\";\n\n  /**\n   * Theme to display the button. This can also be inferred from\n   * SpaceKitProvider.\n   *\n   * Different themes have different box-shadows. Right now we have these\n   * options, but this may expand in the future:\n   *\n   * - `\"light\"` (default)\n   * - `\"dark\"`\n   *\n   * @default \"light\"\n   */\n  theme?: \"light\" | \"dark\";\n\n  /**\n   * The type of the button\n   *\n   * This isn't included in HTMLAttributes but it's a very common property\n   * passed to a button, so we're including it here. If you pass `type` prop\n   * when using any element besides `<button>` you will get React warnings about\n   * passing unrecognized props to an element.\n   */\n  type?: \"button\" | \"submit\" | \"reset\" | undefined;\n\n  /**\n   * Button variants\n   *\n   * The options are as follows:\n   *\n   * - `undefined` (default): A button with text and an optional icon\n   * - `\"fab\"`: Floating action button\n   *\n   *   You must include an `icon` prop and you must _not_ include a `children`\n   *   prop for a floating action button.\n   *\n   *   _Note: this is not type checked; it will cause a runtime error_\n   */\n  variant?: \"fab\";\n}\n\n/**\n * Style system for Space Kit buttons\n *\n * This is intended to be used as an abstraction for your project's style guide.\n *\n * @see https://zpl.io/amdN6Pr\n */\nexport const Button = React.forwardRef<HTMLElement, Props>(\n  (\n    {\n      as = <button />,\n      children,\n      color = defaultColor,\n      variant,\n      endIcon,\n      feel = \"raised\",\n      icon: iconProp,\n      loading,\n      size = \"standard\",\n      theme: propTheme,\n      ...passthroughProps\n    },\n    ref,\n  ) => {\n    if (size === \"default\") {\n      size = \"standard\";\n    }\n    const { isFocusVisible, focusProps } = useFocusRing();\n    const { theme: providerTheme } = useSpaceKitProvider();\n    const theme = propTheme || providerTheme;\n\n    // Capture if the mouse is over the button by using `onPointerEnter` and\n    // `onPointerLeave`, which will still fire if the button is disabled. When\n    // we know the cursor is over the button, then override the button's\n    // `disabled` behavior to allow `Tooltip`s to work.\n    const [isPointerOver, setIsPointerOver] = useState(false);\n\n    const mergedProps = mergeProps(passthroughProps, as.props, focusProps, {\n      ref,\n    });\n\n    /**\n     * If the button is in a `loading` state, then always treat the button as\n     * disabled.\n     */\n    if (loading) {\n      mergedProps.disabled = true;\n    }\n\n    /**\n     * Flag indicating we're going to override the default disabled behavior to\n     * make an antecedent `Tooltip` work\n     */\n    const overrideDisabledBehavior: boolean =\n      useTooltipContext().descendsFromTooltip &&\n      isPointerOver &&\n      mergedProps.disabled;\n\n    /**\n     * Handler to avoid responding to click events for all attached listeners\n     * when `disabled`\n     */\n    const onClick = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      // If the button is disabled, then don't propogate `onClick`\n      // events.\n      if (mergedProps.disabled) return event.preventDefault();\n\n      mergedProps.onClick?.(event);\n    };\n\n    /**\n     * Styles to apply when button is disabled.\n     *\n     * We store this because we use this in multiple places to account for\n     * overriding the default disabled behavior.\n     */\n    const disabledStyles = {\n      backgroundColor:\n        feel === \"flat\"\n          ? \"transparent\"\n          : theme === \"light\"\n          ? colors.silver.light\n          : colors.grey.dark,\n      boxShadow: \"none\",\n      color:\n        feel === \"flat\" && theme === \"dark\"\n          ? colors.grey.dark\n          : colors.grey.light,\n    };\n\n    const focusedStyles: ObjectInterpolation<undefined> = {\n      ...(feel === \"flat\" && {\n        backgroundColor: theme === \"light\" ? colors.white : \"#000\",\n        color: theme === \"light\" ? colors.blue.base : colors.blue.light,\n      }),\n      // The `box-shadow` property is copied directly from Zeplin for the\n      // light theme. For the dark theme we use a variant of the color to\n      // make the borders sharp.\n      boxShadow: `0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 0 0 2px ${\n        theme === \"light\" || color === defaultColor || color === colors.white\n          ? \"#bbdbff\"\n          : getOffsetInPalette(Infinity, \"lighter\", color)\n      }, inset 0 0 0 1px ${\n        color === defaultColor || color === colors.white\n          ? \"#2075d6\"\n          : getOffsetInPalette(1, \"darker\", color)\n      }, inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)`,\n    };\n\n    const icon = loading ? (\n      <LoadingSpinner\n        size=\"2xsmall\"\n        theme={theme === \"light\" ? \"grayscale\" : \"dark\"}\n      />\n    ) : (\n      iconProp\n    );\n\n    /**\n     * Icon size in pixels\n     *\n     * This is stored so we can use the same value for `height` and `width`\n     */\n    const iconSize = size === \"small\" ? 12 : size === \"large\" ? 24 : 16;\n\n    const iconOnly = !children;\n\n    if (variant === \"fab\") {\n      if (!icon) {\n        throw new TypeError(\"FAB buttons are required to have an `icon`\");\n      } else if (children) {\n        throw new TypeError(\"FAB buttons cannot have children, only an `icon`\");\n      }\n    }\n\n    return (\n      <ClassNames>\n        {({ cx, css }) => {\n          const propsToPass = mergeProps(\n            // Omit `onClick` from `otherProps` beacuse we'll be conditionally\n            // calling it in the `onClick` handler depending on `mergedProps.disabled`.\n            // Also exclude `className` beacuse we'll be combining it on\n            // our own with `cx`. This is necessary because `cx` allows for\n            // emotion styles to be logically overwritten.\n            omit(\n              mergedProps,\n              \"className\",\n              \"onClick\",\n              // If we're overriding the default disabled behavior, then strip\n              // it out from the props we'll pass to the element.\n              overrideDisabledBehavior ? \"disabled\" : \"\",\n            ),\n            {\n              \"aria-disabled\": mergedProps.disabled,\n              onClick,\n              onPointerEnter() {\n                setIsPointerOver(true);\n              },\n              onPointerLeave() {\n                setIsPointerOver(false);\n              },\n              className: cx(\n                css([\n                  {\n                    \"&:focus\": {\n                      outline: 0,\n                    },\n                  },\n                  {\n                    backgroundColor:\n                      color === colors.white\n                        ? colors.white\n                        : feel === \"raised\"\n                        ? color\n                        : \"transparent\",\n\n                    borderRadius: variant === \"fab\" ? \"100%\" : 4,\n\n                    borderWidth: 0,\n                    ...(feel !== \"flat\" && {\n                      boxShadow:\n                        theme === \"light\"\n                          ? \"0 1px 4px 0 rgba(18, 21, 26, 0.04), inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)\"\n                          : \"0 0 0 1px rgba(18, 21, 26, 0.2), 0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 1px 0 0 rgba(18, 21, 26, 0.05)\",\n                    }),\n\n                    color: getTextColor({ color, feel, theme }),\n\n                    cursor: mergedProps.disabled ? \"default\" : \"pointer\",\n\n                    // Vertically center children\n                    display: \"inline-flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n\n                    height: getHeight({ size }),\n\n                    minWidth: iconOnly\n                      ? inputHeightDictionary[\n                          size === \"default\" ? \"standard\" : size\n                        ]\n                      : endIcon\n                      ? 0\n                      : size === \"small\"\n                      ? 76\n                      : size === \"default\" || size === \"standard\"\n                      ? 100\n                      : size === \"large\"\n                      ? 112\n                      : assertUnreachable(size),\n\n                    // We have to set the Y padding because browsers (at least Chrome) has\n                    // a non-symmetrical vertical padding applied by default.\n                    paddingLeft: iconOnly ? 0 : 12,\n                    paddingRight: iconOnly ? 0 : endIcon ? 8 : 12,\n\n                    ...(size === \"small\"\n                      ? base.small\n                      : size === \"large\"\n                      ? base.large\n                      : base.base),\n\n                    fontWeight: 600,\n\n                    // Disable the outline because we're setting a custom `:active` style\n                    outline: 0,\n\n                    textDecoration: \"none\",\n                    whiteSpace: \"nowrap\",\n                  },\n\n                  // We need to also set the `:hover` on `:disabled` so it has a\n                  // higher specificity than any `:hover` classes passed in. This\n                  // also means that both of these need to be overriden if we want\n                  // to use a custom disabled color.\n                  mergedProps.disabled\n                    ? overrideDisabledBehavior\n                      ? disabledStyles\n                      : { \"&[disabled], &[disabled]:hover\": disabledStyles }\n                    : {\n                        \":hover, &[data-force-hover-state]\": {\n                          backgroundColor: getHoverBackgroundColor({\n                            color,\n                            feel,\n                            theme,\n                          }),\n                          color: getTextColor({\n                            color,\n                            feel,\n                            theme,\n                            mode: \":hover\",\n                          }),\n                          ...(feel !== \"flat\" && {\n                            // The `box-shadow` property is copied directly from Zeplin\n                            boxShadow:\n                              theme === \"light\"\n                                ? \"0 5px 10px 0 rgba(18, 21, 26, 0.08), inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)\"\n                                : \"0 0 0 1px rgba(18, 21, 26, 0.2), 0 5px 10px 0 rgba(18, 21, 26, 0.12), 0 1px 0 0 rgba(18, 21, 26, 0.05)\",\n                          }),\n                        },\n                        // This is kind of hacky behavior\n                        \"&[data-force-focus-state]\": focusedStyles,\n                        \"&:active, &[data-force-active-state], &[aria-expanded=true]\": {\n                          ...(getTextColor({\n                            color,\n                            feel,\n                            theme,\n                            mode: \":hover\",\n                          }) && {\n                            color: getTextColor({\n                              color,\n                              feel,\n                              theme,\n                              mode: \":active\",\n                            }),\n                          }),\n\n                          backgroundColor:\n                            color === colors.white\n                              ? colors.white\n                              : feel === \"raised\"\n                              ? color\n                              : color === defaultColor\n                              ? theme === \"dark\"\n                                ? colors.grey.darker\n                                : colors.silver.base\n                              : getOffsetInPalette(2, \"lighter\", color),\n\n                          // The `box-shadow` properties are copied directly from Zeplin\n                          boxShadow:\n                            feel !== \"flat\"\n                              ? theme === \"light\"\n                                ? \"inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05), inset 0 2px 2px 0 rgba(18, 21, 26, 0.12)\"\n                                : \"0 0 0 1px rgba(18, 21, 26, 0.2), 0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 -1px 0 0 rgba(18, 21, 26, 0.16), inset 0 1px 2px 0 rgba(18, 21, 26, 0.42)\"\n                              : \"none\",\n                          outline: \"0\",\n                        },\n                      },\n                ]),\n                mergedProps.className,\n                isFocusVisible && css(focusedStyles),\n              ),\n\n              children: (\n                <>\n                  {icon && (\n                    <ButtonIcon\n                      iconSize={iconSize}\n                      className={css({ margin: iconOnly ? 0 : \"0 8px 0 0\" })}\n                    >\n                      {icon}\n                    </ButtonIcon>\n                  )}\n\n                  {children}\n                  {endIcon && !loading && (\n                    <ButtonIcon\n                      iconSize={iconSize}\n                      className={css({ margin: iconOnly ? 0 : `0 0 0 6px` })}\n                    >\n                      {endIcon}\n                    </ButtonIcon>\n                  )}\n                </>\n              ),\n            },\n          );\n\n          return React.cloneElement(as, propsToPass);\n        }}\n      </ClassNames>\n    );\n  },\n);\n"]},"metadata":{},"sourceType":"script"}