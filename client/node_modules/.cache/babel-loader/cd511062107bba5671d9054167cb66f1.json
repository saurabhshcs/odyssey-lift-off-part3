{"ast":null,"code":"import _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _clsx from \"clsx\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nimport _react, { useContext, useEffect, useRef, useState } from \"react\";\nimport { getInteractionModality, isFocusVisible as _isFocusVisible, useFocus, useFocusVisibleListener, useFocusWithin, useKeyboard } from \"@react-aria/interactions\";\nimport { focusWithoutScrolling, runAfterTransition, useLayoutEffect, mergeProps, useSyncRef } from \"@react-aria/utils\";\n/**\n * A utility function that focuses an element while avoiding undesired side effects such\n * as page scrolling and screen reader issues with CSS transitions.\n */\n\nexport function focusSafely(element) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  if (getInteractionModality() === 'virtual') {\n    let lastFocusedElement = document.activeElement;\n    runAfterTransition(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (document.activeElement === lastFocusedElement && document.contains(element)) {\n        focusWithoutScrolling(element);\n      }\n    });\n  } else {\n    focusWithoutScrolling(element);\n  }\n}\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $ee5e90cbb4a22466973155c14222fa1$var$isStyleVisible(element) {\n  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) {\n    return false;\n  }\n\n  let {\n    display,\n    visibility\n  } = element.style;\n  let isVisible = display !== 'none' && visibility !== 'hidden' && visibility !== 'collapse';\n\n  if (isVisible) {\n    const {\n      getComputedStyle\n    } = element.ownerDocument.defaultView;\n    let {\n      display: computedDisplay,\n      visibility: computedVisibility\n    } = getComputedStyle(element);\n    isVisible = computedDisplay !== 'none' && computedVisibility !== 'hidden' && computedVisibility !== 'collapse';\n  }\n\n  return isVisible;\n}\n\nfunction $ee5e90cbb4a22466973155c14222fa1$var$isAttributeVisible(element, childElement) {\n  return !element.hasAttribute('hidden') && (element.nodeName === 'DETAILS' && childElement && childElement.nodeName !== 'SUMMARY' ? element.hasAttribute('open') : true);\n}\n/**\n * Adapted from https://github.com/testing-library/jest-dom and \n * https://github.com/vuejs/vue-test-utils-next/.\n * Licensed under the MIT License.\n * @param element - Element to evaluate for display or visibility.\n */\n\n\nfunction $ee5e90cbb4a22466973155c14222fa1$export$isElementVisible(element, childElement) {\n  return element.nodeName !== '#comment' && $ee5e90cbb4a22466973155c14222fa1$var$isStyleVisible(element) && $ee5e90cbb4a22466973155c14222fa1$var$isAttributeVisible(element, childElement) && (!element.parentElement || $ee5e90cbb4a22466973155c14222fa1$export$isElementVisible(element.parentElement, element));\n}\n\nconst $c9e8f80f5bb1841844f54e4ad30b$var$FocusContext = /*#__PURE__*/_react.createContext(null);\n\nlet $c9e8f80f5bb1841844f54e4ad30b$var$activeScope = null;\nlet $c9e8f80f5bb1841844f54e4ad30b$var$scopes = new Set(); // This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:\n// https://github.com/reactjs/rfcs/pull/109\n// For now, it relies on the DOM tree order rather than the React tree order, and is probably\n// less optimized for performance.\n\n/**\n * A FocusScope manages focus for its descendants. It supports containing focus inside\n * the scope, restoring focus to the previously focused element on unmount, and auto\n * focusing children on mount. It also acts as a container for a programmatic focus\n * management interface that can be used to move focus forward and back in response\n * to user events.\n */\n\nexport function FocusScope(props) {\n  let {\n    children,\n    contain,\n    restoreFocus,\n    autoFocus\n  } = props;\n  let startRef = useRef();\n  let endRef = useRef();\n  let scopeRef = useRef([]);\n  useLayoutEffect(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current.nextSibling;\n    let nodes = [];\n\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n\n    scopeRef.current = nodes;\n    $c9e8f80f5bb1841844f54e4ad30b$var$scopes.add(scopeRef);\n    return () => {\n      $c9e8f80f5bb1841844f54e4ad30b$var$scopes.delete(scopeRef);\n    };\n  }, [children]);\n  $c9e8f80f5bb1841844f54e4ad30b$var$useFocusContainment(scopeRef, contain);\n  $c9e8f80f5bb1841844f54e4ad30b$var$useRestoreFocus(scopeRef, restoreFocus, contain);\n  $c9e8f80f5bb1841844f54e4ad30b$var$useAutoFocus(scopeRef, autoFocus);\n  let focusManager = $c9e8f80f5bb1841844f54e4ad30b$var$createFocusManagerForScope(scopeRef);\n  return /*#__PURE__*/_react.createElement($c9e8f80f5bb1841844f54e4ad30b$var$FocusContext.Provider, {\n    value: focusManager\n  }, /*#__PURE__*/_react.createElement(\"span\", {\n    hidden: true,\n    ref: startRef\n  }), children, /*#__PURE__*/_react.createElement(\"span\", {\n    hidden: true,\n    ref: endRef\n  }));\n}\n/**\n * Returns a FocusManager interface for the parent FocusScope.\n * A FocusManager can be used to programmatically move focus within\n * a FocusScope, e.g. in response to user events like keyboard navigation.\n */\n\nexport function useFocusManager() {\n  return useContext($c9e8f80f5bb1841844f54e4ad30b$var$FocusContext);\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$createFocusManagerForScope(scopeRef) {\n  return {\n    focusNext(opts) {\n      if (opts === void 0) {\n        opts = {};\n      }\n\n      let scope = scopeRef.current;\n      let {\n        from,\n        tabbable,\n        wrap\n      } = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let walker = getFocusableTreeWalker($c9e8f80f5bb1841844f54e4ad30b$var$getScopeRoot(scope), {\n        tabbable\n      }, scope);\n      walker.currentNode = $c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode();\n\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode();\n      }\n\n      if (nextNode) {\n        $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(nextNode, true);\n      }\n\n      return nextNode;\n    },\n\n    focusPrevious(opts) {\n      if (opts === void 0) {\n        opts = {};\n      }\n\n      let scope = scopeRef.current;\n      let {\n        from,\n        tabbable,\n        wrap\n      } = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let walker = getFocusableTreeWalker($c9e8f80f5bb1841844f54e4ad30b$var$getScopeRoot(scope), {\n        tabbable\n      }, scope);\n      walker.currentNode = $c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode();\n\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode();\n      }\n\n      if (previousNode) {\n        $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(previousNode, true);\n      }\n\n      return previousNode;\n    }\n\n  };\n}\n\nconst $c9e8f80f5bb1841844f54e4ad30b$var$focusableElements = ['input:not([disabled]):not([type=hidden])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'a[href]', 'area[href]', 'summary', 'iframe', 'object', 'embed', 'audio[controls]', 'video[controls]', '[contenteditable]'];\nconst $c9e8f80f5bb1841844f54e4ad30b$var$FOCUSABLE_ELEMENT_SELECTOR = $c9e8f80f5bb1841844f54e4ad30b$var$focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';\n$c9e8f80f5bb1841844f54e4ad30b$var$focusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst $c9e8f80f5bb1841844f54e4ad30b$var$TABBABLE_ELEMENT_SELECTOR = $c9e8f80f5bb1841844f54e4ad30b$var$focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$getScopeRoot(scope) {\n  return scope[0].parentElement;\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$useFocusContainment(scopeRef, contain) {\n  let focusedNode = useRef();\n  let raf = useRef(null);\n  useEffect(() => {\n    let scope = scopeRef.current;\n\n    if (!contain) {\n      return;\n    } // Handle the Tab key to contain focus within the scope\n\n\n    let onKeyDown = e => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      let focusedElement = document.activeElement;\n\n      if (!$c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      let walker = getFocusableTreeWalker($c9e8f80f5bb1841844f54e4ad30b$var$getScopeRoot(scope), {\n        tabbable: true\n      }, scope);\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      }\n\n      e.preventDefault();\n\n      if (nextElement) {\n        $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(nextElement, true);\n      }\n    };\n\n    let onFocus = e => {\n      // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n      // restore focus to the previously focused node or the first tabbable element in the active scope.\n      let isInAnyScope = $c9e8f80f5bb1841844f54e4ad30b$var$isElementInAnyScope(e.target, $c9e8f80f5bb1841844f54e4ad30b$var$scopes);\n\n      if (!isInAnyScope) {\n        if (focusedNode.current) {\n          focusedNode.current.focus();\n        } else if ($c9e8f80f5bb1841844f54e4ad30b$var$activeScope) {\n          $c9e8f80f5bb1841844f54e4ad30b$var$focusFirstInScope($c9e8f80f5bb1841844f54e4ad30b$var$activeScope.current);\n        }\n      } else {\n        $c9e8f80f5bb1841844f54e4ad30b$var$activeScope = scopeRef;\n        focusedNode.current = e.target;\n      }\n    };\n\n    let onBlur = e => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        let isInAnyScope = $c9e8f80f5bb1841844f54e4ad30b$var$isElementInAnyScope(document.activeElement, $c9e8f80f5bb1841844f54e4ad30b$var$scopes);\n\n        if (!isInAnyScope) {\n          $c9e8f80f5bb1841844f54e4ad30b$var$activeScope = scopeRef;\n          focusedNode.current = e.target;\n          focusedNode.current.focus();\n        }\n      });\n    };\n\n    document.addEventListener('keydown', onKeyDown, false);\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      document.removeEventListener('keydown', onKeyDown, false);\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]); // eslint-disable-next-line arrow-body-style\n\n  useEffect(() => {\n    return () => cancelAnimationFrame(raf.current);\n  }, [raf]);\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$isElementInAnyScope(element, scopes) {\n  for (let scope of scopes.values()) {\n    if ($c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(element, scope.current)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(element, scope) {\n  return scope.some(node => node.contains(element));\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(element, scroll) {\n  if (scroll === void 0) {\n    scroll = false;\n  }\n\n  if (element != null && !scroll) {\n    try {\n      focusSafely(element);\n    } catch (err) {// ignore\n    }\n  } else if (element != null) {\n    try {\n      element.focus();\n    } catch (err) {// ignore\n    }\n  }\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$focusFirstInScope(scope) {\n  let sentinel = scope[0].previousElementSibling;\n  let walker = getFocusableTreeWalker($c9e8f80f5bb1841844f54e4ad30b$var$getScopeRoot(scope), {\n    tabbable: true\n  }, scope);\n  walker.currentNode = sentinel;\n  $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(walker.nextNode());\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$useAutoFocus(scopeRef, autoFocus) {\n  useEffect(() => {\n    if (autoFocus) {\n      $c9e8f80f5bb1841844f54e4ad30b$var$activeScope = scopeRef;\n\n      if (!$c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(document.activeElement, $c9e8f80f5bb1841844f54e4ad30b$var$activeScope.current)) {\n        $c9e8f80f5bb1841844f54e4ad30b$var$focusFirstInScope(scopeRef.current);\n      }\n    }\n  }, [scopeRef, autoFocus]);\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$useRestoreFocus(scopeRef, restoreFocus, contain) {\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    let nodeToRestore = document.activeElement; // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n\n    let onKeyDown = e => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      let focusedElement = document.activeElement;\n\n      if (!$c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(focusedElement, scope)) {\n        return;\n      } // Create a DOM tree walker that matches all tabbable elements\n\n\n      let walker = getFocusableTreeWalker(document.body, {\n        tabbable: true\n      }); // Find the next tabbable element after the currently focused element\n\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n\n      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {\n        nodeToRestore = null;\n      } // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n\n\n      if ((!nextElement || !$c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(nextElement, scope)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore; // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n\n        do {\n          nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n        } while ($c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(nextElement, scope));\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (nextElement) {\n          $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(nextElement, true);\n        } else {\n          // If there is no next element, blur the focused element to move focus to the body.\n          focusedElement.blur();\n        }\n      }\n    };\n\n    if (!contain) {\n      document.addEventListener('keydown', onKeyDown, true);\n    }\n\n    return () => {\n      if (!contain) {\n        document.removeEventListener('keydown', onKeyDown, true);\n      }\n\n      if (restoreFocus && nodeToRestore && $c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(document.activeElement, scope)) {\n        requestAnimationFrame(() => {\n          if (document.body.contains(nodeToRestore)) {\n            $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(nodeToRestore);\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n}\n/**\n * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}\n * that matches all focusable/tabbable elements.\n */\n\n\nexport function getFocusableTreeWalker(root, opts, scope) {\n  let selector = opts != null && opts.tabbable ? $c9e8f80f5bb1841844f54e4ad30b$var$TABBABLE_ELEMENT_SELECTOR : $c9e8f80f5bb1841844f54e4ad30b$var$FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {\n    acceptNode(node) {\n      var _opts$from; // Skip nodes inside the starting node.\n\n\n      if (opts != null && (_opts$from = opts.from) != null && _opts$from.contains(node)) {\n        return NodeFilter.FILTER_REJECT;\n      }\n\n      if (node.matches(selector) && $ee5e90cbb4a22466973155c14222fa1$export$isElementVisible(node) && (!scope || $c9e8f80f5bb1841844f54e4ad30b$var$isElementInScope(node, scope))) {\n        return NodeFilter.FILTER_ACCEPT;\n      }\n\n      return NodeFilter.FILTER_SKIP;\n    }\n\n  });\n\n  if (opts != null && opts.from) {\n    walker.currentNode = opts.from;\n  }\n\n  return walker;\n}\n/**\n * Creates a FocusManager object that can be used to move focus within an element.\n */\n\nexport function createFocusManager(ref) {\n  return {\n    focusNext(opts) {\n      if (opts === void 0) {\n        opts = {};\n      }\n\n      let root = ref.current;\n      let {\n        from,\n        tabbable,\n        wrap\n      } = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {\n        tabbable\n      });\n\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      }\n\n      let nextNode = walker.nextNode();\n\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode();\n      }\n\n      if (nextNode) {\n        $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(nextNode, true);\n      }\n\n      return nextNode;\n    },\n\n    focusPrevious(opts) {\n      if (opts === void 0) {\n        opts = {};\n      }\n\n      let root = ref.current;\n      let {\n        from,\n        tabbable,\n        wrap\n      } = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {\n        tabbable\n      });\n\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      } else {\n        let next = $c9e8f80f5bb1841844f54e4ad30b$var$last(walker);\n\n        if (next) {\n          $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(next, true);\n        }\n\n        return next;\n      }\n\n      let previousNode = walker.previousNode();\n\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        previousNode = $c9e8f80f5bb1841844f54e4ad30b$var$last(walker);\n      }\n\n      if (previousNode) {\n        $c9e8f80f5bb1841844f54e4ad30b$var$focusElement(previousNode, true);\n      }\n\n      return previousNode;\n    }\n\n  };\n}\n\nfunction $c9e8f80f5bb1841844f54e4ad30b$var$last(walker) {\n  let next;\n  let last;\n\n  do {\n    last = walker.lastChild();\n\n    if (last) {\n      next = last;\n    }\n  } while (last);\n\n  return next;\n}\n/**\n * Determines whether a focus ring should be shown to indicate keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\n\n\nexport function useFocusRing(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  let {\n    autoFocus = false,\n    isTextInput,\n    within\n  } = props;\n  let state = useRef({\n    isFocused: false,\n    isFocusVisible: autoFocus || _isFocusVisible()\n  }).current;\n  let [isFocusVisibleState, setFocusVisible] = useState(() => state.isFocused && state.isFocusVisible);\n\n  let updateState = () => setFocusVisible(state.isFocused && state.isFocusVisible);\n\n  let onFocusChange = isFocused => {\n    state.isFocused = isFocused;\n    updateState();\n  };\n\n  useFocusVisibleListener(isFocusVisible => {\n    state.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {\n    isTextInput\n  });\n  let {\n    focusProps\n  } = useFocus({\n    isDisabled: within,\n    onFocusChange\n  });\n  let {\n    focusWithinProps\n  } = useFocusWithin({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n  return {\n    isFocused: state.isFocused,\n    isFocusVisible: state.isFocused && isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n/**\n * A utility component that applies a CSS class when an element has keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\n\nexport function FocusRing(props) {\n  let {\n    children,\n    focusClass,\n    focusRingClass\n  } = props;\n  let {\n    isFocused,\n    isFocusVisible,\n    focusProps\n  } = useFocusRing(props);\n\n  let child = _react.Children.only(children);\n\n  return /*#__PURE__*/_react.cloneElement(child, mergeProps(child.props, _babelRuntimeHelpersEsmExtends({}, focusProps, {\n    className: _clsx({\n      [focusClass || '']: isFocused,\n      [focusRingClass || '']: isFocusVisible\n    })\n  })));\n}\n\nlet $e11539c8317b2d21639df611cb5658f$var$FocusableContext = /*#__PURE__*/_react.createContext(null);\n\nfunction $e11539c8317b2d21639df611cb5658f$var$useFocusableContext(ref) {\n  let context = useContext($e11539c8317b2d21639df611cb5658f$var$FocusableContext) || {};\n  useSyncRef(context, ref);\n  return context;\n}\n/**\n * Provides DOM props to the nearest focusable child.\n */\n\n\nfunction $e11539c8317b2d21639df611cb5658f$var$FocusableProvider(props, ref) {\n  let {\n    children\n  } = props,\n      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, [\"children\"]);\n\n  let context = _babelRuntimeHelpersEsmExtends({}, otherProps, {\n    ref\n  });\n\n  return /*#__PURE__*/_react.createElement($e11539c8317b2d21639df611cb5658f$var$FocusableContext.Provider, {\n    value: context\n  }, children);\n}\n\nexport let FocusableProvider = /*#__PURE__*/_react.forwardRef($e11539c8317b2d21639df611cb5658f$var$FocusableProvider);\n/**\n * Used to make an element focusable and capable of auto focus.\n */\n\nexport function useFocusable(props, domRef) {\n  let {\n    focusProps\n  } = useFocus(props);\n  let {\n    keyboardProps\n  } = useKeyboard(props);\n  let interactions = mergeProps(focusProps, keyboardProps);\n  let domProps = $e11539c8317b2d21639df611cb5658f$var$useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n  useEffect(() => {\n    if (props.autoFocus && domRef.current) {\n      domRef.current.focus();\n    }\n  }, [props.autoFocus, domRef]);\n  return {\n    focusableProps: mergeProps(_babelRuntimeHelpersEsmExtends({}, interactions, {\n      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n    }), interactionProps)\n  };\n}","map":{"version":3,"sources":["packages/@react-aria/focus/src/focusSafely.ts","packages/@react-aria/focus/src/isElementVisible.ts","packages/@react-aria/focus/src/FocusScope.tsx","packages/@react-aria/focus/src/useFocusRing.ts","packages/@react-aria/focus/src/FocusRing.tsx","packages/@react-aria/focus/src/useFocusable.tsx"],"names":["getInteractionModality","lastFocusedElement","document","runAfterTransition","focusWithoutScrolling","element","visibility","isVisible","display","getComputedStyle","computedVisibility","computedDisplay","childElement","isStyleVisible","isAttributeVisible","isElementVisible","FocusContext","React","activeScope","scopes","autoFocus","startRef","useRef","endRef","scopeRef","useLayoutEffect","node","nodes","useFocusContainment","useRestoreFocus","useAutoFocus","focusManager","createFocusManagerForScope","useContext","focusNext","opts","scope","wrap","from","sentinel","walker","getFocusableTreeWalker","getScopeRoot","tabbable","isElementInScope","nextNode","focusElement","focusPrevious","previousNode","focusableElements","FOCUSABLE_ELEMENT_SELECTOR","TABBABLE_ELEMENT_SELECTOR","focusedNode","raf","useEffect","onKeyDown","e","focusedElement","nextElement","onFocus","isInAnyScope","isElementInAnyScope","focusFirstInScope","onBlur","requestAnimationFrame","cancelAnimationFrame","scroll","nodeToRestore","restoreFocus","selector","NodeFilter","acceptNode","root","ref","next","last","props","within","state","isFocused","isFocusVisible","useState","updateState","setFocusVisible","onFocusChange","useFocusVisibleListener","isTextInput","focusProps","useFocus","isDisabled","focusWithinProps","useFocusWithin","onFocusWithinChange","focusRingClass","child","mergeProps","className","clsx","focusClass","FocusableContext","context","useSyncRef","children","otherProps","_FocusableProvider","keyboardProps","useKeyboard","interactions","domProps","useFocusableContext","interactionProps","domRef","focusableProps","tabIndex","undefined"],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {focusWithoutScrolling, runAfterTransition} from '@react-aria/utils';\nimport {getInteractionModality} from '@react-aria/interactions';\n\n/**\n * A utility function that focuses an element while avoiding undesired side effects such\n * as page scrolling and screen reader issues with CSS transitions.\n */\nexport function focusSafely(element: HTMLElement) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  if (getInteractionModality() === 'virtual') {\n    let lastFocusedElement = document.activeElement;\n    runAfterTransition(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (document.activeElement === lastFocusedElement && document.contains(element)) {\n        focusWithoutScrolling(element);\n      }\n    });\n  } else {\n    focusWithoutScrolling(element);\n  }\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction isStyleVisible(element: Element) {\n  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) {\n    return false;\n  }\n\n  let {display, visibility} = element.style;\n\n  let isVisible = (\n    display !== 'none' &&\n    visibility !== 'hidden' &&\n    visibility !== 'collapse'\n  );\n\n  if (isVisible) {\n    const {getComputedStyle} = element.ownerDocument.defaultView;\n    let {display: computedDisplay, visibility: computedVisibility} = getComputedStyle(element);\n\n    isVisible = (\n      computedDisplay !== 'none' &&\n      computedVisibility !== 'hidden' &&\n      computedVisibility !== 'collapse'\n    );\n  }\n\n  return isVisible;\n}\n\nfunction isAttributeVisible(element: Element, childElement?: Element) {\n  return (\n    !element.hasAttribute('hidden') &&\n    (element.nodeName === 'DETAILS' &&\n      childElement &&\n      childElement.nodeName !== 'SUMMARY'\n      ? element.hasAttribute('open')\n      : true)\n  );\n}\n\n/**\n * Adapted from https://github.com/testing-library/jest-dom and \n * https://github.com/vuejs/vue-test-utils-next/.\n * Licensed under the MIT License.\n * @param element - Element to evaluate for display or visibility.\n */  \nexport function isElementVisible(element: Element, childElement?: Element) {\n  return (\n    element.nodeName !== '#comment' &&\n    isStyleVisible(element) &&\n    isAttributeVisible(element, childElement) &&\n    (!element.parentElement || isElementVisible(element.parentElement, element))\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {focusSafely} from './focusSafely';\nimport {isElementVisible} from './isElementVisible';\nimport React, {ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\n// import {FocusScope, useFocusScope} from 'react-events/focus-scope';\n// export {FocusScope};\n\ninterface FocusScopeProps {\n  /** The contents of the focus scope. */\n  children: ReactNode,\n\n  /**\n   * Whether to contain focus inside the scope, so users cannot\n   * move focus outside, for example in a modal dialog.\n   */\n  contain?: boolean,\n\n  /**\n   * Whether to restore focus back to the element that was focused\n   * when the focus scope mounted, after the focus scope unmounts.\n   */\n  restoreFocus?: boolean,\n\n  /** Whether to auto focus the first focusable element in the focus scope on mount. */\n  autoFocus?: boolean\n}\n\ninterface FocusManagerOptions {\n  /** The element to start searching from. The currently focused element by default. */\n  from?: HTMLElement,\n  /** Whether to only include tabbable elements, or all focusable elements. */\n  tabbable?: boolean,\n  /** Whether focus should wrap around when it reaches the end of the scope. */\n  wrap?: boolean\n}\n\ninterface FocusManager {\n  /** Moves focus to the next focusable or tabbable element in the focus scope. */\n  focusNext(opts?: FocusManagerOptions): HTMLElement,\n  /** Moves focus to the previous focusable or tabbable element in the focus scope. */\n  focusPrevious(opts?: FocusManagerOptions): HTMLElement\n}\n\nconst FocusContext = React.createContext<FocusManager>(null);\n\nlet activeScope: RefObject<HTMLElement[]> = null;\nlet scopes: Set<RefObject<HTMLElement[]>> = new Set();\n\n// This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:\n// https://github.com/reactjs/rfcs/pull/109\n// For now, it relies on the DOM tree order rather than the React tree order, and is probably\n// less optimized for performance.\n\n/**\n * A FocusScope manages focus for its descendants. It supports containing focus inside\n * the scope, restoring focus to the previously focused element on unmount, and auto\n * focusing children on mount. It also acts as a container for a programmatic focus\n * management interface that can be used to move focus forward and back in response\n * to user events.\n */\nexport function FocusScope(props: FocusScopeProps) {\n  let {children, contain, restoreFocus, autoFocus} = props;\n  let startRef = useRef<HTMLSpanElement>();\n  let endRef = useRef<HTMLSpanElement>();\n  let scopeRef = useRef<HTMLElement[]>([]);\n\n  useLayoutEffect(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current.nextSibling;\n    let nodes = [];\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n\n    scopeRef.current = nodes;\n    scopes.add(scopeRef);\n    return () => {\n      scopes.delete(scopeRef);\n    };\n  }, [children]);\n\n  useFocusContainment(scopeRef, contain);\n  useRestoreFocus(scopeRef, restoreFocus, contain);\n  useAutoFocus(scopeRef, autoFocus);\n\n  let focusManager = createFocusManagerForScope(scopeRef);\n\n  return (\n    <FocusContext.Provider value={focusManager}>\n      <span hidden ref={startRef} />\n      {children}\n      <span hidden ref={endRef} />\n    </FocusContext.Provider>\n  );\n}\n\n/**\n * Returns a FocusManager interface for the parent FocusScope.\n * A FocusManager can be used to programmatically move focus within\n * a FocusScope, e.g. in response to user events like keyboard navigation.\n */\nexport function useFocusManager(): FocusManager {\n  return useContext(FocusContext);\n}\n\nfunction createFocusManagerForScope(scopeRef: React.RefObject<HTMLElement[]>): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current;\n      let {from, tabbable, wrap} = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode() as HTMLElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode() as HTMLElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current;\n      let {from, tabbable, wrap} = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode() as HTMLElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode() as HTMLElement;\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    }\n  };\n}\n\nconst focusableElements = [\n  'input:not([disabled]):not([type=hidden])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n  'button:not([disabled])',\n  'a[href]',\n  'area[href]',\n  'summary',\n  'iframe',\n  'object',\n  'embed',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]'\n];\n\nconst FOCUSABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';\n\nfocusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst TABBABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\n\nfunction getScopeRoot(scope: HTMLElement[]) {\n  return scope[0].parentElement;\n}\n\nfunction useFocusContainment(scopeRef: RefObject<HTMLElement[]>, contain: boolean) {\n  let focusedNode = useRef<HTMLElement>();\n\n  let raf = useRef(null);\n  useEffect(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      return;\n    }\n\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = (e) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      let focusedElement = document.activeElement as HTMLElement;\n      if (!isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable: true}, scope);\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as HTMLElement;\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode())  as HTMLElement;\n      }\n\n      e.preventDefault();\n      if (nextElement) {\n        focusElement(nextElement, true);\n      }\n    };\n\n    let onFocus = (e) => {\n      // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n      // restore focus to the previously focused node or the first tabbable element in the active scope.\n      let isInAnyScope = isElementInAnyScope(e.target, scopes);\n      if (!isInAnyScope) {\n        if (focusedNode.current) {\n          focusedNode.current.focus();\n        } else if (activeScope) {\n          focusFirstInScope(activeScope.current);\n        }\n      } else {\n        activeScope = scopeRef;\n        focusedNode.current = e.target;\n      }\n    };\n\n    let onBlur = (e) => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        let isInAnyScope = isElementInAnyScope(document.activeElement, scopes);\n\n        if (!isInAnyScope) {\n          activeScope = scopeRef;\n          focusedNode.current = e.target;\n          focusedNode.current.focus();\n        }\n      });\n    };\n\n    document.addEventListener('keydown', onKeyDown, false);\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      document.removeEventListener('keydown', onKeyDown, false);\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]);\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => cancelAnimationFrame(raf.current);\n  }, [raf]);\n}\n\nfunction isElementInAnyScope(element: Element, scopes: Set<RefObject<HTMLElement[]>>) {\n  for (let scope of scopes.values()) {\n    if (isElementInScope(element, scope.current)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isElementInScope(element: Element, scope: HTMLElement[]) {\n  return scope.some(node => node.contains(element));\n}\n\nfunction focusElement(element: HTMLElement | null, scroll = false) {\n  if (element != null && !scroll) {\n    try {\n      focusSafely(element);\n    } catch (err) {\n      // ignore\n    }\n  } else if (element != null) {\n    try {\n      element.focus();\n    } catch (err) {\n      // ignore\n    }\n  }\n}\n\nfunction focusFirstInScope(scope: HTMLElement[]) {\n  let sentinel = scope[0].previousElementSibling;\n  let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable: true}, scope);\n  walker.currentNode = sentinel;\n  focusElement(walker.nextNode() as HTMLElement);\n}\n\nfunction useAutoFocus(scopeRef: RefObject<HTMLElement[]>, autoFocus: boolean) {\n  useEffect(() => {\n    if (autoFocus) {\n      activeScope = scopeRef;\n      if (!isElementInScope(document.activeElement, activeScope.current)) {\n        focusFirstInScope(scopeRef.current);\n      }\n    }\n  }, [scopeRef, autoFocus]);\n}\n\nfunction useRestoreFocus(scopeRef: RefObject<HTMLElement[]>, restoreFocus: boolean, contain: boolean) {\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    let nodeToRestore = document.activeElement as HTMLElement;\n\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      let focusedElement = document.activeElement as HTMLElement;\n      if (!isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = getFocusableTreeWalker(document.body, {tabbable: true});\n\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as HTMLElement;\n\n      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {\n        nodeToRestore = null;\n      }\n\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !isElementInScope(nextElement, scope)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do {\n          nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as HTMLElement;\n        } while (isElementInScope(nextElement, scope));\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) {\n          focusElement(nextElement, true);\n        } else {\n          // If there is no next element, blur the focused element to move focus to the body.\n          focusedElement.blur();\n        }\n      }\n    };\n\n    if (!contain) {\n      document.addEventListener('keydown', onKeyDown, true);\n    }\n\n    return () => {\n      if (!contain) {\n        document.removeEventListener('keydown', onKeyDown, true);\n      }\n\n      if (restoreFocus && nodeToRestore && isElementInScope(document.activeElement, scope)) {\n        requestAnimationFrame(() => {\n          if (document.body.contains(nodeToRestore)) {\n            focusElement(nodeToRestore);\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n}\n\n/**\n * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}\n * that matches all focusable/tabbable elements.\n */\nexport function getFocusableTreeWalker(root: HTMLElement, opts?: FocusManagerOptions, scope?: HTMLElement[]) {\n  let selector = opts?.tabbable ? TABBABLE_ELEMENT_SELECTOR : FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = document.createTreeWalker(\n    root,\n    NodeFilter.SHOW_ELEMENT,\n    {\n      acceptNode(node) {\n        // Skip nodes inside the starting node.\n        if (opts?.from?.contains(node)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        if ((node as HTMLElement).matches(selector)\n          && isElementVisible(node as HTMLElement)\n          && (!scope || isElementInScope(node as HTMLElement, scope))) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n\n        return NodeFilter.FILTER_SKIP;\n      }\n    }\n  );\n\n  if (opts?.from) {\n    walker.currentNode = opts.from;\n  }\n\n  return walker;\n}\n\n/**\n * Creates a FocusManager object that can be used to move focus within an element.\n */\nexport function createFocusManager(ref: RefObject<HTMLElement>): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let root = ref.current;\n      let {from, tabbable, wrap} = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable});\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      }\n      let nextNode = walker.nextNode() as HTMLElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode() as HTMLElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = {}) {\n      let root = ref.current;\n      let {from, tabbable, wrap} = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable});\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      } else {\n        let next = last(walker);\n        if (next) {\n          focusElement(next, true);\n        }\n        return next;\n      }\n      let previousNode = walker.previousNode() as HTMLElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        previousNode = last(walker);\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    }\n  };\n}\n\nfunction last(walker: TreeWalker) {\n  let next: HTMLElement;\n  let last: HTMLElement;\n  do {\n    last = walker.lastChild() as HTMLElement;\n    if (last) {\n      next = last;\n    }\n  } while (last);\n  return next;\n}\n","import {HTMLAttributes, useState} from 'react';\nimport {isFocusVisible, useFocus, useFocusVisibleListener, useFocusWithin} from '@react-aria/interactions';\nimport {useRef} from 'react';\n\ninterface FocusRingProps {\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default 'false'\n   */\n  within?: boolean,\n\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\ninterface FocusRingAria {\n  /** Whether the element is currently focused. */\n  isFocused: boolean,\n\n  /** Whether keyboard focus should be visible. */\n  isFocusVisible: boolean,\n\n  /** Props to apply to the container element with the focus ring. */\n  focusProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Determines whether a focus ring should be shown to indicate keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function useFocusRing(props: FocusRingProps = {}): FocusRingAria {\n  let {\n    autoFocus = false,\n    isTextInput,\n    within\n  } = props;\n  let state = useRef({\n    isFocused: false,\n    isFocusVisible: autoFocus || isFocusVisible()\n  }).current;\n  let [isFocusVisibleState, setFocusVisible] = useState(() => state.isFocused && state.isFocusVisible);\n\n  let updateState = () => setFocusVisible(state.isFocused && state.isFocusVisible);\n\n  let onFocusChange = isFocused => {\n    state.isFocused = isFocused;\n    updateState();\n  };\n\n  useFocusVisibleListener((isFocusVisible) => {\n    state.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {isTextInput});\n\n  let {focusProps} = useFocus({\n    isDisabled: within,\n    onFocusChange\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n\n  return {\n    isFocused: state.isFocused,\n    isFocusVisible: state.isFocused && isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport clsx from 'clsx';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {ReactElement} from 'react';\nimport {useFocusRing} from './useFocusRing';\n\ninterface FocusRingProps {\n  /** Child element to apply CSS classes to. */\n  children: ReactElement,\n  /** CSS class to apply when the element is focused. */\n  focusClass?: string,\n  /** CSS class to apply when the element has keyboard focus. */\n  focusRingClass?: string,\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default false\n   */\n  within?: boolean,\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\n/**\n * A utility component that applies a CSS class when an element has keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function FocusRing(props: FocusRingProps) {\n  let {children, focusClass, focusRingClass} = props;\n  let {isFocused, isFocusVisible, focusProps} = useFocusRing(props);\n  let child = React.Children.only(children);\n\n  return React.cloneElement(child, mergeProps(child.props, {\n    ...focusProps,\n    className: clsx({\n      [focusClass || '']: isFocused,\n      [focusRingClass || '']: isFocusVisible\n    })\n  }));\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableDOMProps, FocusableProps} from '@react-types/shared';\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport React, {HTMLAttributes, MutableRefObject, ReactNode, RefObject, useContext, useEffect} from 'react';\nimport {useFocus, useKeyboard} from '@react-aria/interactions';\n\ninterface FocusableOptions extends FocusableProps, FocusableDOMProps {\n  /** Whether focus should be disabled. */\n  isDisabled?: boolean\n}\n\ninterface FocusableProviderProps extends HTMLAttributes<HTMLElement> {\n  /** The child element to provide DOM props to. */\n  children?: ReactNode\n}\n\ninterface FocusableContextValue extends FocusableProviderProps {\n  ref?: MutableRefObject<HTMLElement>\n}\n\nlet FocusableContext = React.createContext<FocusableContextValue>(null);\n\nfunction useFocusableContext(ref: RefObject<HTMLElement>): FocusableContextValue {\n  let context = useContext(FocusableContext) || {};\n  useSyncRef(context, ref);\n\n  return context;\n}\n\n/**\n * Provides DOM props to the nearest focusable child.\n */\nfunction FocusableProvider(props: FocusableProviderProps, ref: RefObject<HTMLElement>) {\n  let {children, ...otherProps} = props;\n  let context = {\n    ...otherProps,\n    ref\n  };\n\n  return (\n    <FocusableContext.Provider value={context}>\n      {children}\n    </FocusableContext.Provider>\n  );\n}\n\nlet _FocusableProvider = React.forwardRef(FocusableProvider);\nexport {_FocusableProvider as FocusableProvider};\n\n/**\n * Used to make an element focusable and capable of auto focus.\n */\nexport function useFocusable(props: FocusableOptions, domRef: RefObject<HTMLElement>) {\n  let {focusProps} = useFocus(props);\n  let {keyboardProps} = useKeyboard(props);\n  let interactions = mergeProps(focusProps, keyboardProps);\n  let domProps = useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n\n  useEffect(() => {\n    if (props.autoFocus && domRef.current) {\n      domRef.current.focus();\n    }\n  }, [props.autoFocus, domRef]);\n\n  return {\n    focusableProps: mergeProps(\n      {\n        ...interactions,\n        tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n      },\n      interactionProps\n    )\n  };\n}\n"]},"metadata":{},"sourceType":"module"}