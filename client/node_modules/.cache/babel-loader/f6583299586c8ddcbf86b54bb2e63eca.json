{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar _tslib = require('../_tslib-bcbe0269.js');\n\nvar core = require('@emotion/core');\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nvar colors = require('../colors/colors.js');\n\nvar index = require('../SpaceKitProvider/index.js');\n\nvar LoadingSpinner = /*#__PURE__*/React__default.forwardRef(function (_a, ref) {\n  var propTheme = _a.theme,\n      _b = _a.size,\n      size = _b === void 0 ? \"medium\" : _b,\n      className = _a.className,\n      props = _tslib.__rest(_a, [\"theme\", \"size\", \"className\"]);\n\n  var providerTheme = index.useSpaceKitProvider().theme;\n  var theme = propTheme || providerTheme;\n  /* Length of animation */\n\n  var DURATION = 1000;\n  var SPIN = core.keyframes(templateObject_1 || (templateObject_1 = _tslib.__makeTemplateObject([\"\\n    0% { transform: rotate(0) }\\n    100% { transform: rotate(360deg) }\\n  \"], [\"\\n    0% { transform: rotate(0) }\\n    100% { transform: rotate(360deg) }\\n  \"])));\n  var SIZE_MAP = {\n    large: 90,\n    medium: 64,\n    small: 48,\n    xsmall: 32,\n    \"2xsmall\": 16\n  };\n  var THEME_MAP = {\n    light: {\n      orbitColor: colors.colors.silver.base,\n      orbitOpacity: 1,\n      asteroidColor: colors.colors.blue.base\n    },\n    dark: {\n      orbitColor: colors.colors.white,\n      orbitOpacity: 0.5,\n      asteroidColor: colors.colors.white\n    },\n    grayscale: {\n      orbitColor: colors.colors.silver.darker,\n      orbitOpacity: 1,\n      asteroidColor: colors.colors.grey.light\n    }\n  };\n  var disableAnimations = index.useSpaceKitProvider().disableAnimations;\n  var _c = THEME_MAP[theme],\n      orbitColor = _c.orbitColor,\n      orbitOpacity = _c.orbitOpacity,\n      asteroidColor = _c.asteroidColor;\n  var pixelSize = SIZE_MAP[size];\n  var mountTime = React__default.useRef(Date.now());\n  var mountDelay = disableAnimations ? 0 : -(mountTime.current % DURATION);\n  return core.jsx(\"svg\", _tslib.__assign({\n    className: className,\n    ref: ref,\n    role: \"progressbar\",\n    viewBox: \"0 0 100 100\",\n    css: {\n      width: pixelSize,\n      height: pixelSize\n    }\n  }, props), core.jsx(\"circle\", {\n    strokeWidth: \"8\",\n    stroke: orbitColor,\n    strokeOpacity: orbitOpacity,\n    fill: \"transparent\",\n    r: \"41\",\n    cx: \"50\",\n    cy: \"50\"\n  }), core.jsx(\"g\", {\n    transform: \"translate(50 50)\"\n  }, core.jsx(\"circle\", {\n    css: {\n      animation: SPIN + \" \" + DURATION + \"ms linear infinite\",\n      willChange: \"transform\",\n      animationDelay: mountDelay + \"ms\"\n    },\n    fill: asteroidColor,\n    r: \"10\",\n    cx: \"40\",\n    cy: \"0\"\n  })));\n});\nvar templateObject_1;\nexports.LoadingSpinner = LoadingSpinner;","map":{"version":3,"sources":["../src/Loaders/LoadingSpinner.tsx"],"names":["LoadingSpinner","propTheme","_b","className","props","providerTheme","useSpaceKitProvider","theme","DURATION","SPIN","keyframes","SIZE_MAP","large","medium","small","xsmall","THEME_MAP","light","orbitColor","colors","orbitOpacity","asteroidColor","base","dark","white","grayscale","disableAnimations","_c","pixelSize","mountTime","React","Date","mountDelay","jsx","ref","role","viewBox","css","width","height","strokeWidth","stroke","strokeOpacity","fill","r","cx","cy","transform","animation","willChange","animationDelay"],"mappings":";;;;;;;;;;;;;;;;;;;;;;IA4BaA,cAAc,GAAA,aAAG,cAAK,CAAL,UAAA,CAC5B,UAAA,EAAA,EAAA,GAAA,EAAA;MAAUC,SAAS,GAAA,EAAA,CAAhB,K;MAAkBC,EAAAA,GAAAA,EAAAA,CAAlB,I;MAAkBA,IAAI,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,QAAH,GAAtB,E;MAAmCC,SAAS,GAAA,EAAA,CAA5C,S;MAAiDC,KAAK,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAxD,CAAA,OAAA,EAAA,MAAA,EAAA,WAAA,CAAwD,C;;MACxCC,aAAa,GAAKC,KAAAA,CAAAA,mBAAAA,GAAzB,K;MACFC,KAAK,GAAGN,SAAS,IAAvB,a;;;MAGMO,QAAQ,GAAd,I;MAEMC,IAAI,GAAGC,IAAAA,CAAAA,SAAAA,CAAS,gBAAA,KAAA,gBAAA,GAAA,MAAA,CAAA,oBAAA,CAAA,CAAA,+EAAA,CAAA,EAAA,CAAtB,+EAAsB,CAAA,CAAA,CAATA,C;MAKPC,QAAQ,GAAyB;AACrCC,IAAAA,KAAK,EADgC,EAAA;AAErCC,IAAAA,MAAM,EAF+B,EAAA;AAGrCC,IAAAA,KAAK,EAHgC,EAAA;AAIrCC,IAAAA,MAAM,EAJ+B,EAAA;eAK1B;AAL0B,G;MAQjCC,SAAS,GAOX;AACFC,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAEC,MAAAA,CAAAA,MAAAA,CAAAA,MAAAA,CADP,IAAA;AAELC,MAAAA,YAAY,EAFP,CAAA;AAGLC,MAAAA,aAAa,EAAEF,MAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAAYG;AAHtB,KADL;AAMFC,IAAAA,IAAI,EAAE;AACJL,MAAAA,UAAU,EAAEC,MAAAA,CAAAA,MAAAA,CADR,KAAA;AAEJC,MAAAA,YAAY,EAFR,GAAA;AAGJC,MAAAA,aAAa,EAAEF,MAAAA,CAAAA,MAAAA,CAAOK;AAHlB,KANJ;AAWFC,IAAAA,SAAS,EAAE;AACTP,MAAAA,UAAU,EAAEC,MAAAA,CAAAA,MAAAA,CAAAA,MAAAA,CADH,MAAA;AAETC,MAAAA,YAAY,EAFH,CAAA;AAGTC,MAAAA,aAAa,EAAEF,MAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAAYF;AAHlB;AAXT,G;MAkBIS,iBAAiB,GAAKpB,KAAAA,CAAAA,mBAAAA,GAAtBoB,iB;MAEFC,EAAAA,GAA8CX,SAAS,CAAvDW,KAAuD,C;MAArDT,UAAU,GAAA,EAAA,CAAZS,U;MAAcP,YAAY,GAAA,EAAA,CAA1BO,Y;MAA4BN,aAAa,GAAA,EAAA,CAAzCM,a;MAEAC,SAAS,GAAGjB,QAAQ,CAA1B,IAA0B,C;MAEpBkB,SAAS,GAAGC,cAAK,CAALA,MAAAA,CAAaC,IAAI,CAAnC,GAA+BA,EAAbD,C;MACZE,UAAU,GAAGN,iBAAiB,GAAA,CAAA,GAAO,EAAEG,SAAS,CAATA,OAAAA,GAA7C,QAA2C,C;SAGzCI,IAAAA,CAAAA,GAAAA,CAAAA,KAAAA,EAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AACE9B,IAAAA,SAAS,EAAEA,SADb8B;AAEEC,IAAAA,GAAG,EAAEA,GAFPD;AAGEE,IAAAA,IAAI,EAAC,aAHPF;AAIEG,IAAAA,OAAO,EAAC,aAJVH;AAKEI,IAAAA,GAAG,EAAE;AACHC,MAAAA,KAAK,EADF,SAAA;AAEHC,MAAAA,MAAM,EAAEX;AAFL;AALPK,GAAAA,EASM7B,KATN6B,CAAAA,EAWEA,IAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAAAA;AACEO,IAAAA,WAAW,EAAC,GADdP;AAEEQ,IAAAA,MAAM,EAAEvB,UAFVe;AAGES,IAAAA,aAAa,EAAEtB,YAHjBa;AAIEU,IAAAA,IAAI,EAAC,aAJPV;AAKEW,IAAAA,CAAC,EAAC,IALJX;AAMEY,IAAAA,EAAE,EAAC,IANLZ;AAOEa,IAAAA,EAAE,EAAC;AAPLb,GAAAA,CAXFA,EAoBEA,IAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA;AAAGc,IAAAA,SAAS,EAAC;AAAbd,GAAAA,EACEA,IAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAAAA;AACEI,IAAAA,GAAG,EAAE;AACHW,MAAAA,SAAS,EAAKvC,IAAI,GAAJA,GAAAA,GAAAA,QAAAA,GADX,oBAAA;AAEHwC,MAAAA,UAAU,EAFP,WAAA;AAGHC,MAAAA,cAAc,EAAKlB,UAAU,GAAA;AAH1B,KADPC;AAMEU,IAAAA,IAAI,EAAEtB,aANRY;AAOEW,IAAAA,CAAC,EAAC,IAPJX;AAQEY,IAAAA,EAAE,EAAC,IARLZ;AASEa,IAAAA,EAAE,EAAC;AATLb,GAAAA,CADFA,CApBFA,C;AAxDC,CAAuB,C","sourcesContent":["/** @jsx jsx */\nimport React from \"react\";\nimport type { Property } from \"csstype\";\nimport { jsx, keyframes } from \"@emotion/core\";\nimport { colors } from \"../colors\";\nimport { useSpaceKitProvider } from \"../SpaceKitProvider\";\n\nexport type Size = \"large\" | \"medium\" | \"small\" | \"xsmall\" | \"2xsmall\";\nexport type Theme = \"light\" | \"dark\" | \"grayscale\";\ninterface Props {\n  /**\n   * Class name that will be applied to the svg\n   */\n  className?: string;\n\n  /**\n   * Theme for the spinner\n   * @default \"light\"\n   */\n  theme?: Theme;\n\n  /**\n   * Size of the spinner\n   * @default \"medium\"\n   */\n  size?: Size;\n}\n\nexport const LoadingSpinner = React.forwardRef<SVGSVGElement, Props>(\n  ({ theme: propTheme, size = \"medium\", className, ...props }, ref) => {\n    const { theme: providerTheme } = useSpaceKitProvider();\n    const theme = propTheme || providerTheme;\n\n    /* Length of animation */\n    const DURATION = 1000;\n\n    const SPIN = keyframes`\n    0% { transform: rotate(0) }\n    100% { transform: rotate(360deg) }\n  `;\n\n    const SIZE_MAP: Record<Size, number> = {\n      large: 90,\n      medium: 64,\n      small: 48,\n      xsmall: 32,\n      \"2xsmall\": 16,\n    };\n\n    const THEME_MAP: Record<\n      Theme,\n      {\n        orbitColor: Property.Color;\n        orbitOpacity: Property.Opacity;\n        asteroidColor: Property.Color;\n      }\n    > = {\n      light: {\n        orbitColor: colors.silver.base,\n        orbitOpacity: 1,\n        asteroidColor: colors.blue.base,\n      },\n      dark: {\n        orbitColor: colors.white,\n        orbitOpacity: 0.5,\n        asteroidColor: colors.white,\n      },\n      grayscale: {\n        orbitColor: colors.silver.darker,\n        orbitOpacity: 1,\n        asteroidColor: colors.grey.light,\n      },\n    };\n\n    const { disableAnimations } = useSpaceKitProvider();\n\n    const { orbitColor, orbitOpacity, asteroidColor } = THEME_MAP[theme];\n\n    const pixelSize = SIZE_MAP[size];\n\n    const mountTime = React.useRef(Date.now());\n    const mountDelay = disableAnimations ? 0 : -(mountTime.current % DURATION);\n\n    return (\n      <svg\n        className={className}\n        ref={ref}\n        role=\"progressbar\"\n        viewBox=\"0 0 100 100\"\n        css={{\n          width: pixelSize,\n          height: pixelSize,\n        }}\n        {...props}\n      >\n        <circle\n          strokeWidth=\"8\"\n          stroke={orbitColor}\n          strokeOpacity={orbitOpacity}\n          fill=\"transparent\"\n          r=\"41\"\n          cx=\"50\"\n          cy=\"50\"\n        />\n        <g transform=\"translate(50 50)\">\n          <circle\n            css={{\n              animation: `${SPIN} ${DURATION}ms linear infinite`,\n              willChange: \"transform\",\n              animationDelay: `${mountDelay}ms`,\n            }}\n            fill={asteroidColor}\n            r=\"10\"\n            cx=\"40\"\n            cy=\"0\"\n          />\n        </g>\n      </svg>\n    );\n  },\n);\n"]},"metadata":{},"sourceType":"script"}