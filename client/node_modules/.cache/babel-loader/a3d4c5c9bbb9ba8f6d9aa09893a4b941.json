{"ast":null,"code":"'use strict';\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nvar defaultState = {\n  descendsFromTooltip: false\n};\nvar TooltipContext = /*#__PURE__*/React.createContext(undefined);\n/**\r\n * Component to indicate to descentent components that they are wrapped by a\r\n * `Tooltip`.\r\n */\n\nvar TooltipContextProvider = function (_a) {\n  var children = _a.children,\n      descendsFromTooltip = _a.descendsFromTooltip;\n  var state = React.useMemo(function () {\n    return {\n      descendsFromTooltip: descendsFromTooltip !== null && descendsFromTooltip !== void 0 ? descendsFromTooltip : defaultState.descendsFromTooltip\n    };\n  }, [descendsFromTooltip]);\n  return /*#__PURE__*/React.createElement(TooltipContext.Provider, {\n    value: state\n  }, children);\n};\n/**\r\n * Hook to extract values of `TooltipContext` with defaults applied.\r\n *\r\n * This will _not_ `throw` if used outside of a `TooltipContextProvider`.\r\n */\n\n\nfunction useTooltipContext() {\n  var _a;\n\n  return (_a = React.useContext(TooltipContext)) !== null && _a !== void 0 ? _a : defaultState;\n}\n\nexports.TooltipContextProvider = TooltipContextProvider;\nexports.useTooltipContext = useTooltipContext;","map":{"version":3,"sources":["src/shared/TooltipContext.tsx"],"names":["defaultState","descendsFromTooltip","TooltipContext","React","TooltipContextProvider","children","state","value","useTooltipContext"],"mappings":";;;;;;;;;;AAMA,IAAMA,YAAY,GAAU;AAC1BC,EAAAA,mBAAmB,EAAE;AADK,CAA5B;AAIA,IAAMC,cAAc,GAAA,aAAGC,KAAAA,CAAAA,aAAAA,CAAvB,SAAuBA,CAAvB;;;;;;AAMA,IAAaC,sBAAsB,GAA6B,UAAA,EAAA,EAAA;MAC9DC,QAAQ,GAAA,EAAA,CAAA,Q;MACRJ,mBAAmB,GAAA,EAAA,CAAA,mB;MAEbK,KAAK,GAAG,KAAA,CAAA,OAAA,CACZ,YAAA;WAAO;AACLL,MAAAA,mBAAmB,EACjBA,mBAAmB,KAAnBA,IAAAA,IAAAA,mBAAmB,KAAA,KAAnBA,CAAAA,GAAAA,mBAAAA,GAAuBD,YAAY,CAACC;AAFjC,K;AADK,GAAA,EAKZ,CALF,mBAKE,CALY,C;sBASZ,KAAA,CAAA,aAAA,CAACC,cAAc,CAAf,QAAA,EAAA;AAAyBK,IAAAA,KAAK,EAAED;AAAhC,GAAA,EADF,QACE,C;AAbG,CAAP;;;;;;;;AAsBA,SAAgBE,iBAAhB,GAAgBA;;;eACPL,KAAAA,CAAAA,UAAAA,CAAAA,cAAAA,C,MAAAA,I,IAAAA,EAAAA,KAAAA,KAAAA,C,GAAAA,E,GAAP,Y","sourcesContent":["import * as React from \"react\";\n\ninterface State {\n  descendsFromTooltip: boolean;\n}\n\nconst defaultState: State = {\n  descendsFromTooltip: false,\n};\n\nconst TooltipContext = React.createContext<State | undefined>(undefined);\n\n/**\n * Component to indicate to descentent components that they are wrapped by a\n * `Tooltip`.\n */\nexport const TooltipContextProvider: React.FC<Partial<State>> = ({\n  children,\n  descendsFromTooltip,\n}) => {\n  const state = React.useMemo(\n    () => ({\n      descendsFromTooltip:\n        descendsFromTooltip ?? defaultState.descendsFromTooltip,\n    }),\n    [descendsFromTooltip],\n  );\n\n  return (\n    <TooltipContext.Provider value={state}>{children}</TooltipContext.Provider>\n  );\n};\n\n/**\n * Hook to extract values of `TooltipContext` with defaults applied.\n *\n * This will _not_ `throw` if used outside of a `TooltipContextProvider`.\n */\nexport function useTooltipContext(): State {\n  return React.useContext(TooltipContext) ?? defaultState;\n}\n"]},"metadata":{},"sourceType":"script"}